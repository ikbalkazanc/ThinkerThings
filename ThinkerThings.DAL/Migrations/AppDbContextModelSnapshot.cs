// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ThinkerThings.DAL;

namespace ThinkerThings.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("ThinkerThings.Core.Entities.Devices.AirConditioner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("FanSpeed")
                        .HasColumnType("integer");

                    b.Property<int>("Tempature")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("isOpen")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AirConditioners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FanSpeed = 0,
                            Tempature = 0,
                            UserId = 1,
                            isOpen = false
                        });
                });

            modelBuilder.Entity("ThinkerThings.Core.Entities.Devices.MotionSensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("isAnyMotion")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MotionSensors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 1,
                            isAnyMotion = false
                        });
                });

            modelBuilder.Entity("ThinkerThings.Core.Entities.Devices.SmartLamp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("isOpen")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SmartLamp");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 1,
                            isOpen = false
                        });
                });

            modelBuilder.Entity("ThinkerThings.Core.Entities.MotionDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MotionSensorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MotionSensorId");

                    b.ToTable("MotionDates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 12, 29, 2, 4, 14, 610, DateTimeKind.Local).AddTicks(3168),
                            MotionSensorId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 12, 29, 2, 4, 14, 611, DateTimeKind.Local).AddTicks(5971),
                            MotionSensorId = 1
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 12, 29, 2, 4, 14, 611, DateTimeKind.Local).AddTicks(5987),
                            MotionSensorId = 1
                        });
                });

            modelBuilder.Entity("ThinkerThings.Core.Entities.Network", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("SSID")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Networks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "123",
                            SSID = "Network"
                        });
                });

            modelBuilder.Entity("ThinkerThings.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Mail")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("NetworkId")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("NetworkId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Mail = "ikbalkazanc",
                            Name = "ikbal",
                            NetworkId = 1,
                            Password = "123",
                            Surname = "Kazancı"
                        });
                });

            modelBuilder.Entity("ThinkerThings.Core.Entities.Devices.AirConditioner", b =>
                {
                    b.HasOne("ThinkerThings.Core.Entities.User", "User")
                        .WithMany("AirConditioners")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThinkerThings.Core.Entities.Devices.MotionSensor", b =>
                {
                    b.HasOne("ThinkerThings.Core.Entities.User", "User")
                        .WithMany("MotionSensors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThinkerThings.Core.Entities.Devices.SmartLamp", b =>
                {
                    b.HasOne("ThinkerThings.Core.Entities.User", "User")
                        .WithMany("SmartLamps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThinkerThings.Core.Entities.MotionDate", b =>
                {
                    b.HasOne("ThinkerThings.Core.Entities.Devices.MotionSensor", "MotionSensor")
                        .WithMany("MotionDate")
                        .HasForeignKey("MotionSensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MotionSensor");
                });

            modelBuilder.Entity("ThinkerThings.Core.Entities.User", b =>
                {
                    b.HasOne("ThinkerThings.Core.Entities.Network", "Network")
                        .WithOne("User")
                        .HasForeignKey("ThinkerThings.Core.Entities.User", "NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Network");
                });

            modelBuilder.Entity("ThinkerThings.Core.Entities.Devices.MotionSensor", b =>
                {
                    b.Navigation("MotionDate");
                });

            modelBuilder.Entity("ThinkerThings.Core.Entities.Network", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("ThinkerThings.Core.Entities.User", b =>
                {
                    b.Navigation("AirConditioners");

                    b.Navigation("MotionSensors");

                    b.Navigation("SmartLamps");
                });
#pragma warning restore 612, 618
        }
    }
}
